<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Butterfly主题博客之页脚美化</title>
      <link href="/posts/14926/"/>
      <url>/posts/14926/</url>
      
        <content type="html"><![CDATA[<h1 id="Butterfly主题之页脚美化"><a href="#Butterfly主题之页脚美化" class="headerlink" title="Butterfly主题之页脚美化"></a>Butterfly主题之页脚美化</h1><h2 id="一、配置运行时间和动态版权图标"><a href="#一、配置运行时间和动态版权图标" class="headerlink" title="一、配置运行时间和动态版权图标"></a>一、配置运行时间和动态版权图标</h2><h3 id="1-添加js文件"><a href="#1-添加js文件" class="headerlink" title="1.添加js文件"></a>1.添加js文件</h3><div class="note info no-icon flat"><p>info 提示块标签</p></div><p>首先确保在搭建博客的时候已经将<code>theme-&gt;butterfly</code>文件夹下的<code>_config.yml</code>文件复制到项目根目录下，并重命名为 <code>_config.butterfly.yml</code>，如下图所示：</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251030144634239.png" alt="image-20251030144633190"></p><p>在此基础上，在<code>source</code>目录下创建<code>scripts</code>文件夹，然后在其中新建一个xxx.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//版权图标动态显示</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentYear = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">const</span> copyrightElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.copyright&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (copyrightElement) &#123;</span><br><span class="line">        copyrightElement.<span class="property">innerHTML</span> = <span class="string">`©网站起始时间 - <span class="subst">$&#123;currentYear&#125;</span> &lt;i class=&quot;fa-fw fas fa-star fa-beat&quot; style=&quot;color: #ffff00;&quot;&gt;&lt;/i&gt; By 博主名`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时间动态显示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showDateTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> timeDisplay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;span_dt_dt&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!timeDisplay) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2024-09-05T15:41:23&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> elapsedMilliseconds = now - startTime;</span><br><span class="line">    <span class="keyword">const</span> seconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>(elapsedMilliseconds / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oneYearInSeconds = <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">if</span> (seconds &lt; oneYearInSeconds) &#123;</span><br><span class="line">        <span class="keyword">const</span> days = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">        <span class="keyword">const</span> remainingSecondsAfterDays = seconds % (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">const</span> hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(remainingSecondsAfterDays / (<span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">        <span class="keyword">const</span> remainingSecondsAfterHours = remainingSecondsAfterDays % (<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">const</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(remainingSecondsAfterHours / <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">const</span> sec = remainingSecondsAfterHours % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        timeDisplay.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;days&#125;</span>&lt;/span&gt; 天 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;hours&#125;</span>&lt;/span&gt; 时 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;minutes&#125;</span>&lt;/span&gt; 分 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;sec&#125;</span>&lt;/span&gt; 秒</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / oneYearInSeconds);</span><br><span class="line">        <span class="keyword">const</span> remainingSecondsAfterYears = seconds % oneYearInSeconds;</span><br><span class="line">        <span class="keyword">const</span> days = <span class="title class_">Math</span>.<span class="title function_">floor</span>(remainingSecondsAfterYears / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">        <span class="keyword">const</span> remainingSecondsAfterDays = remainingSecondsAfterYears % (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">const</span> hours = <span class="title class_">Math</span>.<span class="title function_">floor</span>(remainingSecondsAfterDays / (<span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">        <span class="keyword">const</span> remainingSecondsAfterHours = remainingSecondsAfterDays % (<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">const</span> minutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>(remainingSecondsAfterHours / <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">const</span> sec = remainingSecondsAfterHours % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        timeDisplay.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;years&#125;</span>&lt;/span&gt; 年 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;days&#125;</span>&lt;/span&gt; 天 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;hours&#125;</span>&lt;/span&gt; 时 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;minutes&#125;</span>&lt;/span&gt; 分 </span></span><br><span class="line"><span class="string">            &lt;span style=&quot;color:#ffff00&quot;&gt;<span class="subst">$&#123;sec&#125;</span>&lt;/span&gt; 秒</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(showDateTime, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> frameworkInfo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.framework-info&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (frameworkInfo) &#123;</span><br><span class="line">        frameworkInfo.<span class="property">innerHTML</span> = <span class="string">&#x27;本站已运行&lt;span id=&quot;span_dt_dt&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">showDateTime</span>();</span><br><span class="line">&#125;);   </span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将<code>网站起始时间</code>改为你自己的网站的起始时间</li><li>从 <a href="https://fontawesome.com/icons">Font Awesome 图标库</a> 中选择你喜欢的图标样式替换 <code>fas fa-star fa-beat</code> 和 <code>color: #ffff00</code></li><li>将<code>博主名</code>改为自己的名字</li><li>将 <code>2024-09-05T15:41:23</code> 更改为你自己的网站的起始时间</li><li>将 <code>&lt;span style=&quot;color:#ffff00&quot;&gt;</code> 更改为你喜欢的年&#x2F;天&#x2F;日&#x2F;时&#x2F;分&#x2F;秒对应数字的显示颜色</li></ul><h3 id="2-引入xxx-js文件"><a href="#2-引入xxx-js文件" class="headerlink" title="2.引入xxx.js文件"></a>2.引入xxx.js文件</h3><p>在主题_config.butterfly.yml文件中引入上面你写好的xxx.js</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/xxx.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、配置底部图标"><a href="#二、配置底部图标" class="headerlink" title="二、配置底部图标"></a>二、配置底部图标</h2><h3 id="1-使用-shields-io-生成徽标"><a href="#1-使用-shields-io-生成徽标" class="headerlink" title="1.使用 shields.io 生成徽标"></a>1.使用 <a href="https://shields.io/">shields.io</a> 生成徽标</h3><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251030150953672.png" alt="image-20251030150953508"></p><ul><li><p>点击 <code>Get started</code></p></li><li><p>点击右侧 <code>+ Show optional parameters</code> 展开可选参数后按照你的需求填写以下参数</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251030151906559.png" alt="image-20251030151906407"></p><p><strong>badgeContent</strong>: 徽标内容，按照 “徽标类型名-徽标名-徽标颜色” 的格式填写，用 “-“ 分隔，例如：Frame-Hexo-blue<br><strong>style</strong>: 徽标风格，例如：选择 flat<br><strong>logo</strong>: 徽标logo名，例如：hexo</p></li><li><p>点击下方 <code>Execute</code> 生成徽标，上述配置预览效果为：<img src="https://img.shields.io/badge/Frame-Hexo-blue?style=flat&logo=hexo" alt="image-hexo"></p></li><li><p>复制<code>URL</code></p></li></ul><h3 id="2-配置-config-butterfly-yml文件"><a href="#2-配置-config-butterfly-yml文件" class="headerlink" title="2.配置 _config.butterfly.yml文件"></a>2.配置 _config.butterfly.yml文件</h3><p>修改_config.butterfly.yml 文件中的 Footer Settings</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="string">&lt;p&gt;</span></span><br><span class="line">    <span class="string">&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;xxx&quot;&gt;&lt;img</span> <span class="string">src=&quot;xxx&quot;</span> <span class="string">title=&quot;xxxx&quot;&gt;&lt;/a&gt;</span></span><br><span class="line">    <span class="string">&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;xxx&quot;&gt;&lt;img</span> <span class="string">src=&quot;xxx&quot;</span> <span class="string">title=&quot;xxxx&quot;&gt;&lt;/a&gt;</span></span><br><span class="line">    <span class="string">&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;xxx&quot;&gt;&lt;img</span> <span class="string">src=&quot;xxx&quot;</span> <span class="string">title=&quot;xxxx&quot;&gt;&lt;/a&gt;</span></span><br><span class="line">    <span class="string">&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Copyright of theme and framework</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>href: 徽标超链接目标的URL，即鼠标点击徽标后跳转的网址</li><li>img src: 徽标显示样式的URL，即之前复制的URL</li><li>title: 徽标的标题，即鼠标停留在徽标上时显示的提示文本</li></ul><h2 id="三、效果展示"><a href="#三、效果展示" class="headerlink" title="三、效果展示"></a>三、效果展示</h2><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251030152935201.png" alt="image-20251030152934853"></p>]]></content>
      
      
      <categories>
          
          <category> Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题博客之制作分类和标签页</title>
      <link href="/posts/14925/"/>
      <url>/posts/14925/</url>
      
        <content type="html"><![CDATA[<h1 id="博客添加分类和标签页"><a href="#博客添加分类和标签页" class="headerlink" title="博客添加分类和标签页"></a>博客添加分类和标签页</h1><h2 id="一、添加“分类”页"><a href="#一、添加“分类”页" class="headerlink" title="一、添加“分类”页"></a>一、添加“分类”页</h2><h3 id="1-生成“分类”页并添加type属性"><a href="#1-生成“分类”页并添加type属性" class="headerlink" title="1.生成“分类”页并添加type属性"></a>1.生成“分类”页并添加type属性</h3><p>使用任意编辑器打开项目文件夹，打开终端或者在项目文件夹中鼠标右键，点击“Open Git Bash here”</p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>会在&#x2F;source&#x2F;categories目录下面生成一个index.md文件，打开之后默认内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line"><span class="section">date: 2025-10-28 15:37:20</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>添加 type: “categories” 到内容中，这样是为了在网页中点击“分类”可以跳转到这个页面中，添加后是这样的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2025-10-28 15:37:20</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="2-给文章添加“categories”属性"><a href="#2-给文章添加“categories”属性" class="headerlink" title="2.给文章添加“categories”属性"></a>2.给文章添加“categories”属性</h3><p>新建文章或者在之前写好的文章中添加categories属性</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 搭建个人图床服务</span><br><span class="line">date: 2025-10-28 20:25:41</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">     -</span> 阿里云</span><br><span class="line"><span class="bullet">     -</span> PicGo</span><br><span class="line"><span class="bullet">     -</span> Typora</span><br><span class="line">categories: Butterfly</span><br></pre></td></tr></table></figure><p>这样文章就归属于“Butterfly”分类下面了。注意：<strong>Hexo一篇文章只能属于一个分类</strong>，如果添加了多个分类，那么其他分类就会嵌套在上一个分类的下面。</p><h2 id="二、创建“标签”页"><a href="#二、创建“标签”页" class="headerlink" title="二、创建“标签”页"></a>二、创建“标签”页</h2><h3 id="1-生成“标签”页并添加type属性"><a href="#1-生成“标签”页并添加type属性" class="headerlink" title="1.生成“标签”页并添加type属性"></a>1.生成“标签”页并添加type属性</h3><p>跟生成“分类”页的操作一样，在博客项目文件夹中，打开终端，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>也会在&#x2F;source&#x2F;tags目录下面生成一个index.md文件，打开之后默认内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="section">date: 2025-10-28 15:37:20</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2025-10-28 15:37:20</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>需要注意的是所有命令的冒号后面一定要跟着一个空格，不然命令无法生效。</p><h3 id="2-给文章添加“tags”属性"><a href="#2-给文章添加“tags”属性" class="headerlink" title="2.给文章添加“tags”属性"></a>2.给文章添加“tags”属性</h3><p>新建文章或者在之前写好的文章中添加tags属性</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 搭建个人图床服务</span><br><span class="line">date: 2025-10-28 20:25:41</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">     -</span> 阿里云</span><br><span class="line"><span class="bullet">     -</span> PicGo</span><br><span class="line"><span class="bullet">     -</span> Typora</span><br><span class="line">categories: Butterfly</span><br></pre></td></tr></table></figure><p>上面的“分类”只能有一个，但是“标签”可以有很多个。</p><p>以上就是分类页和标签页的添加过程，总的来说就是在终端中输入生成指令，然后进入到对应的index.md中添加type，最后在文章中添加自己想要的分类和标签。</p>]]></content>
      
      
      <categories>
          
          <category> Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人图床服务</title>
      <link href="/posts/3/"/>
      <url>/posts/3/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云OSS服务-PicGo-Typora搭建图库"><a href="#阿里云OSS服务-PicGo-Typora搭建图库" class="headerlink" title="阿里云OSS服务+PicGo+Typora搭建图库"></a>阿里云OSS服务+PicGo+Typora搭建图库</h1><h2 id="一、配置阿里云OSS服务"><a href="#一、配置阿里云OSS服务" class="headerlink" title="一、配置阿里云OSS服务"></a>一、配置阿里云OSS服务</h2><p>1.首先注册登录阿里云平台<a href="https://www.aliyun.com/">阿里云-计算，为了无法计算的价值</a></p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028211402769.png" alt="image-20251028211402458"></p><p>依次点击<strong>产品</strong>-&gt;<strong>存储</strong>-&gt;<strong>对象存储OSS</strong>，进入以下页面</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028211648612.png" alt="image-20251028211648027"></p><p>现在可以免费试用</p><p>2.创建Bucket,还是进入OSS对象存储，如果找不到就搜索，进入管理控制台。名称自定义，后面要用，地域选择离自己近的，读写权限改为公共读，其他保持默认，点击确定。</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028212121377.png" alt="image-20251028212121162"></p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028212305503.png" alt="image-20251028212305366"></p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028212341512.png" alt="image-20251028212341403"></p><p>3.打开读写权限</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028212520757.png" alt="image-20251028212520651"></p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028212603148.png" alt="image-20251028212603057"></p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028212640839.png" alt="image-20251028212640746"></p><p>记住自己的Bucket列表名和区域名</p><p>我这里是<strong>my-blogimages</strong>和<strong>oss-cn-qingdao</strong></p><p>然后点击<strong>文件列表</strong>，新建一个目录。</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028213030094.png" alt="image-20251028213029996"></p><p>4.创建RAM用户</p><p>创建子用户：在阿里云中找到 <code>RAM访问控制-身份管理-用户-创建用户</code>，登录名称任意，勾选允许 <code>OpenAPI 调用访问</code>，创建完成后会得到一组 <code>AccessKey ID</code> 和 <code>AccessKey Secret</code>，需要保管好，后续会用到。</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028214050906.png" alt="image-20251028214050745"></p><p>添加权限</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028214127516.png" alt="image-20251028214127415"></p><p>主要是记住：<strong>AccessKey ID</strong>和<strong>AccessKey Secret</strong></p><h2 id="二、PicGo下载与配置"><a href="#二、PicGo下载与配置" class="headerlink" title="二、PicGo下载与配置"></a>二、PicGo下载与配置</h2><p>PicGo 是一款开源的图床管理工具，旨在简化图片上传过程，支持多种图床平台，包括阿里云 OSS、GitHub、七牛云等。PicGo 提供了图像上传、URL 复制、自动命名等功能，能够大幅提升图像管理效率，尤其适合程序员和博主等需要频繁插入图片的用户。</p><ol><li><p>下载与安装PicGo</p><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/picgo/releases">Releases · Molunerfinn&#x2F;PicGo</a></p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028214747301.png" alt="image-20251028214747259"></p><p>然后一路默认安装即可。</p></li><li><p>配置PicGo</p><p>启动 PicGo 后，选择 <strong>图床设置</strong> -&gt; <strong>阿里云 OSS</strong>，填写 AccessKey、Bucket 名称和存储区域，点击确定并设置为默认图床。</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028215059796.png" alt="image-20251028215059746"></p></li></ol><h2 id="三、Typora"><a href="#三、Typora" class="headerlink" title="三、Typora"></a>三、Typora</h2><p>一款轻量级 Markdown 编辑器，支持多种输出格式，支持将本地图片一键上传至图床。</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028203837031.png" alt="image-20251028203836393"></p><p>1.在 typora 的偏好设置的<strong>图像</strong>中，进行如下配置：</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028204135183.png" alt="image-20251028204135089"></p><ul><li>在<strong>插入图片时</strong>，选择<strong>上传图片</strong></li><li>在<strong>上传服务设定</strong>，选择 <strong>PicGo(app)</strong>，并设置刚才安装的 PicGo.exe 位置</li></ul><p>2.点击<strong>验证图片上传选项</strong>，出现“success:true”则说明上传成功。</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028204703605.png" alt="image-20251028204703563"></p>]]></content>
      
      
      <categories>
          
          <category> Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> PicGo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly主题博客之搭建教程</title>
      <link href="/posts/111/"/>
      <url>/posts/111/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github搭建博客教程"><a href="#Hexo-Github搭建博客教程" class="headerlink" title="Hexo+Github搭建博客教程"></a>Hexo+Github搭建博客教程</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1-Node-js安装"><a href="#1-Node-js安装" class="headerlink" title="1.Node.js安装"></a>1.Node.js安装</h3><p>Node.js是Hexo的运行环境，必须先安装。</p><ol><li><p>官网下载<a href="https://nodejs.org/en">Node.js — Run JavaScript Everywhere</a></p></li><li><p>默认选项安装，一路点击“确认”</p></li><li><p>win+R输入cmd，打开命令提示符验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查 Node.js 版本</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>返回版本信息则代表安装成功！</p><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028195811875.png" alt="image-20251028104236478"></p></li></ol><p>然后进行npm换源，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>无报错则安装完成！</p><h3 id="2-Git安装"><a href="#2-Git安装" class="headerlink" title="2.Git安装"></a>2.Git安装</h3><ol><li><p>下载Git:<a href="https://git-scm.com/install/">Git - Install</a></p><p>选择[Git for Windows&#x2F;x64 Setup]</p></li><li><p>安装时选择默认选项，一路选择回车</p></li><li><p>验证安装：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>出现版本号则说明安装成功！</p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><ol><li><p>在Windows搜索栏中搜索“Git Bash”，打开。</p></li><li><p>输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>安装之后，运行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>验证是否安装成功，当出现版本号则说明安装成功！</p></li></ol><h3 id="4-GitHub部署"><a href="#4-GitHub部署" class="headerlink" title="4.GitHub部署"></a>4.GitHub部署</h3><ol><li><p>在GitHub官网注册一个账号</p></li><li><p>注册后创建仓库，仓库名必须为：<strong>&lt;用户名&gt;.github.io</strong></p></li><li><p>Git Bash 运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &lt;你的用户名&gt;</span><br><span class="line">git config --global user.email &lt;你的邮箱&gt;</span><br></pre></td></tr></table></figure><p>运行以下代码检查是否配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028195828409.png" alt="image-20251028110643030"></p><p>当出现user.name和user.email与之前输入的相同时，则配置成功！</p><h3 id="5-连接至GitHub"><a href="#5-连接至GitHub" class="headerlink" title="5.连接至GitHub"></a>5.连接至GitHub</h3><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &lt;你的邮箱&gt;</span><br></pre></td></tr></table></figure><p>按三次回车生成ssh密钥，用于连接到GitHub</p><p>之后打开C盘用户文件夹下的.ssh的文件夹，用记事本打开 id_rsa.pub，复制里面的内容。</p><p>然后点击GitHub账户头像 &gt; Settings &gt; SSH and GPG keys &gt; New SSH key</p><p>Title随意，Key粘贴刚刚复制的密钥，之后点Add SSH key</p><p>运行以下代码测试连接，出现连接到账户至此环境部署完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://my-blogimages.oss-cn-qingdao.aliyuncs.com/typora-image/20251028195837746.png" alt="image-20251028115039314"></p><p>说明连接成功！</p><h2 id="二、新建Hexo项目"><a href="#二、新建Hexo项目" class="headerlink" title="二、新建Hexo项目"></a>二、新建Hexo项目</h2><p>在想要创建的文件夹下，右键，Open Git Bash here，运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 项目名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入刚创建的项目</span></span><br><span class="line">cd 项目名</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h2 id="三、配置Hexo"><a href="#三、配置Hexo" class="headerlink" title="三、配置Hexo"></a>三、配置Hexo</h2><p>推荐使用VS code 进行编辑</p><p>安装后使用VScode打开项目文件夹，点击查看&gt;终端，运行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo g; hexo s</span><br></pre></td></tr></table></figure><p>CTRL+C 可结束运行，浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 测试网站</p><h2 id="四、安装主题"><a href="#四、安装主题" class="headerlink" title="四、安装主题"></a>四、安装主题</h2><p>这里使用的是<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly主题</a></p><ol><li><p>如果你沒有 pug 以及 stylus 的渲染器，请先下载安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>下载butterfly主题到项目文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li></ol><p>可能出现的问题：</p><p>fatal: unable to access ‘<a href="https://github.com/.../.git%E2%80%98">https://github.com/.../.git‘</a>: Recv failure Connection was rese</p><p>解决办法：</p><p>在终端输入以下命令，设置 Git 使用本地代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>7890是梯子的代理端口号。</p><p>设置完成后，可以通过以下命令检验是否设置成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure><h2 id="五、托管到GitHub"><a href="#五、托管到GitHub" class="headerlink" title="五、托管到GitHub"></a>五、托管到GitHub</h2><p>安装 hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改 _config.yml 文件 deploy 部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:&lt;用户名&gt;/&lt;用户名&gt;.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>修改好配置后记得 CTRL+S 保存，运行以下命令，将代码部署到 GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><p>如果出现 <strong>Deploy done</strong>，则说明部署成功！</p><h2 id="六、需要注意的问题"><a href="#六、需要注意的问题" class="headerlink" title="六、需要注意的问题"></a>六、需要注意的问题</h2><p>由于每个用户只能有一个GitHub页面，所以一定要设置成 用户名.github.io，不然虽然能创建成功，但是无法用这个打开页面。</p>]]></content>
      
      
      <categories>
          
          <category> Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[<h3 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h3><p>跟着视频教程一步步终于搭建好了属于自己的博客，期间也遇到过许多问题，不过也都一一上网查找解决了。搭建博客的初衷是想在里面记录一下自己的生活和学到的一些技术知识，方便以后查找复习。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
